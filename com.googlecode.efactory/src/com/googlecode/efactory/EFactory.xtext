grammar com.googlecode.efactory.EFactory with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate eFactory "http://www.googlecode.com/efactory/EFactory"

Factory:
	(epackages+=PackageImport)*
	(imports+=Import)*
	(annotations+=Annotation)*
	root=NewObject;
	
PackageImport:
'use' ePackage = [ecore::EPackage|QualifiedName] '.*';
	// TODO like the *.Xtext grammar itself does, support namespace and package name based (try the 'import' above!) + maybe support an "as" syntax

Import: // @deprecated.. once the index-based approach works & well tested, this may get removed completely..
	'import' (importURI=STRING // must be named 'importURI'
	);

Annotation:
	NameMapping;

// TODO further consider if name mapping is best put in-line into objects.. it would have to repeat in every file..
// logically this rather belongs into an external mapping, like HUTN's Configuration (HutnConfig), or even better directly into an Xcore as annotations 
NameMapping:
	GlobalNameMapping | CustomNameMapping;

GlobalNameMapping:
	"@Name" "{" nameFeature=ID "}" ;

CustomNameMapping:
	"@Name" "{" eClass=[ecore::EClass|QualifiedName] "=" nameFeature=[ecore::EAttribute] "}" ;
	
Feature:
	eFeature=[ecore::EStructuralFeature] ":" (value=Value)? ;
	// value isn't really optional semantically of course
	// but because it may be missing while typing, this works out much better in practice like this
	// the EFactoryJavaValidator flags it up if it's really missing
	// without this, there are confusing parsing errors, the proposal provider doesn't work as it should, etc.
	
NewObject:
	eClass=[ecore::EClass|QualifiedName] (name=StringId)? "{"
		(features += Feature)*
	"}";

Value:
	// The two (!) Syntactic Predicates => are needed here to solve "Decision can match input such as "RULE_ID '.' RULE_ID {RULE_STRING..RULE_DATE, '}', '['..'false'}" using multiple alternatives: 3, 4"
	MultiValue | Attribute | =>Containment | =>Reference;

MultiValue:
	{MultiValue} "[" (values += Value)* "]" ;

Reference:
	// NOTE we ref. an EObject, and not an [NewObject].. this EObject is always the
	// respective "real" EObject, in the derived state if its a reference to something
	// in an EFactory resource, or a reference to an existing non-EFactory EObject, 
	// e.g. in an integration scenario with other Xtext grammars.
	value = [ecore::EObject|QualifiedName];
	
Containment:
	value = NewObject;
	
Attribute: (EnumAttribute | StringAttribute | IntegerAttribute | BooleanAttribute | DoubleAttribute | DateAttribute | NullAttribute);

EnumAttribute: ":" value = [ecore::EEnumLiteral];


// TODO Attribute Types should later not be hard-coded here anymore.. Grammar should be more open & generic.

StringAttribute:  value = STRING;

IntegerAttribute: value = LONG;
	
DoubleAttribute:  value = DOUBLE;

DateAttribute:    value = DATE;

NullAttribute:    value = "NULL";
	
BooleanAttribute: value = BOOLEAN;

QualifiedName: ValidID (=>'.' ValidID)*;
  
ValidID: ID;

StringId: ID |STRING;

terminal BOOLEAN returns ecore::EBoolean : "true" | "false";
terminal LONG returns ecore::ELong : ('-')?  ('0'..'9')+;
terminal DOUBLE returns ecore::EDouble : ('-')?  ('0'..'9')+ '.'  ('0'..'9')+;
// TODO Date RegExp should later not be hard-coded here anymore at all.. Grammar should be more open & generic.
terminal DATE returns ecore::EDate : ('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9')+;
